version: '3'

x-airflow-common:
  &airflow-common
  # In order to add custom dependencies or upgrade provider packages you can use your extended image.
  # Comment the image line, place your Dockerfile in the directory where you placed the docker-compose.yaml
  # and uncomment the "build" line below, Then run `docker-compose build` to build the images.
  # image: ${AIRFLOW_IMAGE_NAME:-apache/airflow:2.8.1}
  build: .
  environment:
    &airflow-common-env
    AIRFLOW__CORE__EXECUTOR: CeleryExecutor
    AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres/airflow
    AIRFLOW__CELERY__RESULT_BACKEND: db+postgresql://airflow:airflow@postgres/airflow
    AIRFLOW__CELERY__BROKER_URL: redis://:@redis:6379/0
    AIRFLOW__CORE__FERNET_KEY: ''
    AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: 'true'
    AIRFLOW__CORE__LOAD_EXAMPLES: 'false'
    AIRFLOW__API__AUTH_BACKENDS: 'airflow.api.auth.backend.basic_auth,airflow.api.auth.backend.session'
    # yamllint disable rule:line-length
    # Use simple http server on scheduler for health checks
    # See https://airflow.apache.org/docs/apache-airflow/stable/administration-and-deployment/logging-monitoring/check-health.html#scheduler-health-check-server
    # yamllint enable rule:line-length
    AIRFLOW__SCHEDULER__ENABLE_HEALTH_CHECK: 'true'
    # WARNING: Use _PIP_ADDITIONAL_REQUIREMENTS option ONLY for a quick checks
    # for other purpose (development, test and especially production usage) build/extend Airflow image.
    _PIP_ADDITIONAL_REQUIREMENTS: ${_PIP_ADDITIONAL_REQUIREMENTS:-}
  volumes:
    - ${AIRFLOW_PROJ_DIR:-.}/dags:/opt/airflow/dags
    - ${AIRFLOW_PROJ_DIR:-.}/logs:/opt/airflow/logs
    - ${AIRFLOW_PROJ_DIR:-.}/config:/opt/airflow/config
    - ${AIRFLOW_PROJ_DIR:-.}/plugins:/opt/airflow/plugins
  user: "${AIRFLOW_UID:-50000}:0"
  depends_on:
    &airflow-common-depends-on
    redis:
      condition: service_healthy
    postgres:
      condition: service_healthy

services:

  postgres:
    image: postgres:13
    environment:
      POSTGRES_USER: airflow
      POSTGRES_PASSWORD: airflow
      POSTGRES_DB: airflow
    volumes:
      - postgres-db-volume:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "airflow"]
      interval: 10s
      retries: 5
      start_period: 5s
    restart: always


  redis:
    image: redis:latest
    expose:
      - 6379
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 30s
      retries: 50
      start_period: 30s
    restart: always

  airflow-webserver:
    <<: *airflow-common
    command: webserver
    ports:
      - "8084:8080"
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8084/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully


  airflow-scheduler:
    <<: *airflow-common
    command: scheduler
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8974/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully


  airflow-worker:
    <<: *airflow-common
    command: celery worker
    healthcheck:
      # yamllint disable rule:line-length
      test:
        - "CMD-SHELL"
        - 'celery --app airflow.providers.celery.executors.celery_executor.app inspect ping -d "celery@$${HOSTNAME}" || celery --app airflow.executors.celery_executor.app inspect ping -d "celery@$${HOSTNAME}"'
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    environment:
      <<: *airflow-common-env
      # Required to handle warm shutdown of the celery workers properly
      # See https://airflow.apache.org/docs/docker-stack/entrypoint.html#signal-propagation
      DUMB_INIT_SETSID: "0"
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully

  airflow-triggerer:
    <<: *airflow-common
    command: triggerer
    healthcheck:
      test: ["CMD-SHELL", 'airflow jobs check --job-type TriggererJob --hostname "$${HOSTNAME}"']
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully

  airflow-init:
    <<: *airflow-common
    entrypoint: /bin/bash
    # yamllint disable rule:line-length
    command:
      - -c
      - |
        if [[ -z "${AIRFLOW_UID}" ]]; then
          echo
          echo -e "\033[1;33mWARNING!!!: AIRFLOW_UID not set!\e[0m"
          echo "If you are on Linux, you SHOULD follow the instructions below to set "
          echo "AIRFLOW_UID environment variable, otherwise files will be owned by root."
          echo "For other operating systems you can get rid of the warning with manually created .env file:"
          echo "    See: https://airflow.apache.org/docs/apache-airflow/stable/howto/docker-compose/index.html#setting-the-right-airflow-user"
          echo
        fi
        one_meg=1048576
        mem_available=$$(($$(getconf _PHYS_PAGES) * $$(getconf PAGE_SIZE) / one_meg))
        cpus_available=$$(grep -cE 'cpu[0-9]+' /proc/stat)
        disk_available=$$(df / | tail -1 | awk '{print $$4}')
        warning_resources="false"
        if (( mem_available < 4000 )) ; then
          echo
          echo -e "\033[1;33mWARNING!!!: Not enough memory available for Docker.\e[0m"
          echo "At least 4GB of memory required. You have $$(numfmt --to iec $$((mem_available * one_meg)))"
          echo
          warning_resources="true"
        fi
        if (( cpus_available < 2 )); then
          echo
          echo -e "\033[1;33mWARNING!!!: Not enough CPUS available for Docker.\e[0m"
          echo "At least 2 CPUs recommended. You have $${cpus_available}"
          echo
          warning_resources="true"
        fi
        if (( disk_available < one_meg * 10 )); then
          echo
          echo -e "\033[1;33mWARNING!!!: Not enough Disk space available for Docker.\e[0m"
          echo "At least 10 GBs recommended. You have $$(numfmt --to iec $$((disk_available * 1024 )))"
          echo
          warning_resources="true"
        fi
        if [[ $${warning_resources} == "true" ]]; then
          echo
          echo -e "\033[1;33mWARNING!!!: You have not enough resources to run Airflow (see above)!\e[0m"
          echo "Please follow the instructions to increase amount of resources available:"
          echo "   https://airflow.apache.org/docs/apache-airflow/stable/howto/docker-compose/index.html#before-you-begin"
          echo
        fi
        mkdir -p /sources/logs /sources/dags /sources/plugins
        chown -R "${AIRFLOW_UID}:0" /sources/{logs,dags,plugins}
        exec /entrypoint airflow version
    # yamllint enable rule:line-length
    environment:
      <<: *airflow-common-env
      _AIRFLOW_DB_MIGRATE: 'true'
      _AIRFLOW_WWW_USER_CREATE: 'true'
      _AIRFLOW_WWW_USER_USERNAME: ${_AIRFLOW_WWW_USER_USERNAME:-airflow}
      _AIRFLOW_WWW_USER_PASSWORD: ${_AIRFLOW_WWW_USER_PASSWORD:-airflow}
      _PIP_ADDITIONAL_REQUIREMENTS: ''
    user: "0:0"
    volumes:
      - ${AIRFLOW_PROJ_DIR:-.}:/sources
    # networks:
    #   - my_net

  airflow-cli:
    <<: *airflow-common
    profiles:
      - debug
    environment:
      <<: *airflow-common-env
      CONNECTION_CHECK_MAX_COUNT: "0"
    # Workaround for entrypoint issue. See: https://github.com/apache/airflow/issues/16252
    command:
      - bash
      - -c
      - airflow

  # You can enable flower by adding "--profile flower" option e.g. docker-compose --profile flower up
  # or by explicitly targeted on the command line e.g. docker-compose up flower.
  # See: https://docs.docker.com/compose/profiles/
  flower:
    <<: *airflow-common
    command: celery flower
    profiles:
      - flower
    ports:
      - "5555:5555"
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:5555/"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully

  
  minio:
    image: minio/minio:latest
    container_name: minio
    ports:
      - '0.0.0.0:9000:9000'
      - '9001:9001'
    environment:
      - MINIO_ROOT_USER=minio_access_key
      - MINIO_ROOT_PASSWORD=minio_secret_key
    volumes:
      - ./minio-data:/data
    command: server /data --console-address ":9001"
  
  clickhouse:
    image: clickhouse/clickhouse-server:latest
    restart: always
    environment:
      CLICKHOUSE_DB: 'data_warehouse'
      CLICKHOUSE_USER: 'admin'
      CLICKHOUSE_PASSWORD: '123qweasd'
    ports:
      - "8123:8123"
      - "9002:9000"
    volumes:
      - ./clickhouse_data:/var/lib/clickhouse/
      - ./clickhouse_log:/var/log/clickhouse-server/
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "10"

  zookeeper:
    image: confluentinc/cp-zookeeper:7.3.2
    restart: always
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "52181:2181"
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "10"


  kafka-broker:
    image: confluentinc/cp-kafka:latest
    restart: always
    hostname: kafka-broker
    container_name: kafka-broker
    ports:
      - "19092:19092"
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka-broker:19092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_LOG_CLEANUP_POLICY: compact
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "10"


  schema-registry:
    image: confluentinc/cp-schema-registry:7.3.2
    restart: always
    hostname: schema-registry
    container_name: schema-registry
    depends_on:
      - kafka-broker
      - zookeeper
    ports:
      - "8081:8081"
    environment:
      SCHEMA_REGISTRY_HOST_NAME: schema-registry
      SCHEMA_REGISTRY_KAFKASTORE_CONNECTION_URL: 'zookeeper:2181'
      SCHEMA_REGISTRY_LISTENERS: http://0.0.0.0:8081
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: kafka-broker:19092
      SCHEMA_REGISTRY_DEBUG: 'true'
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "10"

  kafka-connect:
    image: confluentinc/cp-kafka-connect:7.3.2
    restart: always
    container_name: kafka-connect
    ports:
      - "8083"
    depends_on:
      - kafka-broker
      - schema-registry
      - zookeeper
    environment:
      CONNECT_BOOTSTRAP_SERVERS: kafka-broker:19092
      CONNECT_REST_PORT: 8083
      CONNECT_REST_ADVERTISED_HOST_NAME: kafka-connect
      CONNECT_GROUP_ID: kafka-connect-group
      CONNECT_CONFIG_STORAGE_TOPIC: docker-connect-configs
      CONNECT_OFFSET_STORAGE_TOPIC: docker-connect-offsets
      CONNECT_STATUS_STORAGE_TOPIC: docker-connect-status
      CONNECT_CONFIG_STORAGE_REPLICATION_FACTOR: "1"
      CONNECT_OFFSET_STORAGE_REPLICATION_FACTOR: "1"
      CONNECT_STATUS_STORAGE_REPLICATION_FACTOR: "1"
      CONNECT_KEY_CONVERTER: io.confluent.connect.avro.AvroConverter
      CONNECT_VALUE_CONVERTER: io.confluent.connect.avro.AvroConverter
      CONNECT_KEY_CONVERTER_SCHEMA_REGISTRY_URL: 'http://schema-registry:8081'
      CONNECT_VALUE_CONVERTER_SCHEMA_REGISTRY_URL: 'http://schema-registry:8081'
      CONNECT_INTERNAL_KEY_CONVERTER: "org.apache.kafka.connect.json.JsonConverter"
      CONNECT_INTERNAL_VALUE_CONVERTER: "org.apache.kafka.connect.json.JsonConverter"
      CONNECT_LOG4J_ROOT_LOGLEVEL: "INFO"
      CONNECT_LOG4J_LOGGERS: "org.apache.kafka.connect.runtime.rest=WARN,org.reflections=ERROR"
      CONNECT_PLUGIN_PATH: '/usr/share/java,/etc/kafka-connect/source/jars,/etc/kafka-connect/sink/jars,/usr/share/confluent-hub-components'
    volumes:
      - ./connectors/source:/etc/kafka-connect/source/jars/
      - ./connectors/sink:/etc/kafka-connect/sink/jars/
      - ./connectors:/connectors/
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "10"
    command:
      - bash
      - -c
      - |
        echo "Launching Kafka Connect worker"
        /etc/confluent/docker/run &

        echo "Waiting for Kafka Connect to start listening on localhost ⏳"
        while : ; do
            curl_status=$$(curl -s -o /dev/null -w %{http_code} http://localhost:8083/connectors)
            echo -e $$(date) " Kafka Connect listener HTTP state: " $$curl_status " (waiting for 200)"
            if [ $$curl_status -eq 200 ] ; then
            break
            fi
            sleep 5 
        done

        
        echo "creating kafka topics"
        kafka-topics --create --bootstrap-server broker:19092 --replication-factor 1 --topic MyFirstTopic


        echo -e "\n--\n+> Creating Data Generator source"

        curl -s -X POST -H  "Content-Type:application/json" http://localhost:8083/connectors \
            -d '{
                "name": "mysql-source", 
                "config": {
                    "connector.class": "io.debezium.connector.mysql.MySqlConnector", 
                    "database.hostname": "mysql_production", 
                    "database.port": "3306", 
                    "database.user": "root", 
                    "database.password": "my-secret-pw", 
                    "database.server.id": "1", 
                    "topic.prefix": "production", 
                    "schema.history.internal.kafka.bootstrap.servers": "kafka-broker:19092", 
                    "schema.history.internal.kafka.topic": "dbhistory.production", 
                    "include.schema.changes": "false",
                    "key.converter": "org.apache.kafka.connect.json.JsonConverter",
                    "value.converter": "io.confluent.connect.avro.AvroConverter",
                    "key.converter.schemas.enable": "false",
                    "value.converter.schemas.enable": "true",
                    "value.converter.schema.registry.url": "http://schema-registry:8081",
                    "log.retention.bytes":"-1",
                    "log.retention.hours":"168",       
                    "log.retention.minutes":"null",
                    "log.retention.ms":"-1",
                    "transforms": "unwrap",
                    "transforms.unwrap.type": "io.debezium.transforms.ExtractNewRecordState",
                    "transforms.unwrap.drop.tombstones": "true",
                    "transforms.unwrap.add.fields": "op,source.ts_ms:EVENT_TS,ts_ms:KAFKA_EVENT_TS",
                    "snapshot.mode": "initial"
                  }
                }'


          curl -s -X POST -H  "Content-Type:application/json" http://localhost:8083/connectors \
            -d '{
                "name": "sink-minio",
                "config": {
                  "connector.class": "io.confluent.connect.s3.S3SinkConnector",
                  "flush.size": "1",
                  "timezone": "Asia/Tehran",
                  "rotate.interval.ms": "3600000",
                  "retry.backoff.ms": "60000",
                  "locale": "en-US",
                  "aws.access.key.id": "minio_access_key",
                  "aws.secret.access.key": "minio_secret_key",
                  "format.class": "io.confluent.connect.s3.format.parquet.ParquetFormat",
                  "partitioner.class": "io.confluent.connect.storage.partitioner.DailyPartitioner",
                  "storage.class": "io.confluent.connect.s3.storage.S3Storage",
                  "key.converter": "org.apache.kafka.connect.json.JsonConverter",
                  "value.converter": "io.confluent.connect.avro.AvroConverter",
                  "key.converter.schemas.enable": "false",
                  "value.converter.schemas.enable": "false",
                  "s3.bucket.name": "production",
                  "schema.compatibility": "BACKWARD",
                  "connect.meta.data": "false",
                  "store.url": "http://minio:9000",
                  "topics.regex": "production.production_db.*",
                  "value.converter.schema.registry.url": "http://schema-registry:8081",
                  "path.format": "YYYY-MM-dd",
                  "timestamp.extractor": "Record",
                  "timestamp.field": "__EVENT_TS"
                }
              }'

        sleep infinity


  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui
    restart: always
    ports:
      - "6680:6680"
    depends_on:
      - kafka-broker
      - schema-registry
      - zookeeper
      - kafka-connect
    environment:
      SERVER_PORT: 6680
      LOGGING_LEVEL_ROOT: info
      KAFKA_CLUSTERS_0_NAME: Kafka-Cluster
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka-broker:19092
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181
      KAFKA_CLUSTERS_0_SCHEMAREGISTRY: http://schema-registry:8081
      KAFKA_CLUSTERS_0_KAFKACONNECT_0_NAME: kafka-connect
      KAFKA_CLUSTERS_0_KAFKACONNECT_0_ADDRESS: http://kafka-connect:8083
      AUTH_TYPE: "LOGIN_FORM"
      SPRING_SECURITY_USER_NAME: admin
      SPRING_SECURITY_USER_PASSWORD: 1qazxsw@3edc
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "10"


  mysql_production:
    image: mysql:latest
    container_name: mysql_production
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: my-secret-pw
      MYSQL_DATABASE: production_db
      MYSQL_USER: user
      MYSQL_PASSWORD: password
    ports:
      - "33061:3306"
    volumes:
      - mysql-db:/var/lib/mysql


  clickhouse-live:
    image: clickhouse/clickhouse-server:22.5
    restart: always
    environment:
      CLICKHOUSE_DB: 'live_db'
      CLICKHOUSE_USER: 'admin'
      CLICKHOUSE_PASSWORD: 'admin123'
    ports:
      - "8124:8123"
    depends_on:
      - kafka-broker
      - schema-registry
      - zookeeper
      - kafka-connect
      - kafka-ui
    volumes:
      - clickhouse:/etc/clickhouse-server
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "10"
        
volumes:
  postgres-db-volume:
  mysql-db: 
    driver: local
  minio-data:
    driver: local
  clickhouse:
    driver: local
  minio-config:
    driver: local
